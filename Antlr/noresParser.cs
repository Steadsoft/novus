//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from nores.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class noresParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, WS=14, NEWLINE=15, TAB=16, INT=17, 
		CALL=18, GOTO=19, PROCEDURE=20, PROC=21, END=22, IDENTIFIER=23, ARROW=24, 
		DOT=25, COMMA=26, LPAR=27, RPAR=28, EQUALS=29, TIMES=30, DIVIDE=31, PLUS=32, 
		MINUS=33, SEMICOLON=34, POWER=35;
	public const int
		RULE_prog = 0, RULE_statement = 1, RULE_assign_stmt = 2, RULE_reference = 3, 
		RULE_arguments = 4, RULE_arguments_list = 5, RULE_basic_reference = 6, 
		RULE_structure_qualification = 7, RULE_structure_qualification_list = 8, 
		RULE_subscript = 9, RULE_subscript_commalist = 10, RULE_expression = 11, 
		RULE_expression_9 = 12, RULE_expression_8 = 13, RULE_expression_7 = 14, 
		RULE_expression_6 = 15, RULE_expression_5 = 16, RULE_expression_4 = 17, 
		RULE_expression_3 = 18, RULE_expression_2 = 19, RULE_expression_1 = 20, 
		RULE_prefix_expression = 21, RULE_parenthesized_expression = 22, RULE_primitive_expression = 23, 
		RULE_constant = 24, RULE_prefix_operator = 25, RULE_comparison_operator = 26, 
		RULE_identifier = 27, RULE_keyword = 28, RULE_keyword_stmt = 29, RULE_call_stmt = 30, 
		RULE_goto_stmt = 31, RULE_end_stmt = 32, RULE_procedure_stmt = 33;
	public static readonly string[] ruleNames = {
		"prog", "statement", "assign_stmt", "reference", "arguments", "arguments_list", 
		"basic_reference", "structure_qualification", "structure_qualification_list", 
		"subscript", "subscript_commalist", "expression", "expression_9", "expression_8", 
		"expression_7", "expression_6", "expression_5", "expression_4", "expression_3", 
		"expression_2", "expression_1", "prefix_expression", "parenthesized_expression", 
		"primitive_expression", "constant", "prefix_operator", "comparison_operator", 
		"identifier", "keyword", "keyword_stmt", "call_stmt", "goto_stmt", "end_stmt", 
		"procedure_stmt"
	};

	private static readonly string[] _LiteralNames = {
		null, "'|:'", "'&:'", "'|'", "'~'", "'&'", "'||'", "'>'", "'>='", "'<'", 
		"'<='", "'~>'", "'~='", "'~<'", null, null, null, null, "'call'", "'goto'", 
		"'procedure'", "'proc'", "'end'", null, "'->'", "'.'", "','", "'('", "')'", 
		"'='", "'*'", "'/'", "'+'", "'-'", "';'", "'**'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "WS", "NEWLINE", "TAB", "INT", "CALL", "GOTO", "PROCEDURE", 
		"PROC", "END", "IDENTIFIER", "ARROW", "DOT", "COMMA", "LPAR", "RPAR", 
		"EQUALS", "TIMES", "DIVIDE", "PLUS", "MINUS", "SEMICOLON", "POWER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "nores.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static noresParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public noresParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public noresParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 68;
					statement();
					}
					} 
				}
				State = 73;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_stmtContext assign_stmt() {
			return GetRuleContext<Assign_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_stmtContext keyword_stmt() {
			return GetRuleContext<Keyword_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(noresParser.SEMICOLON, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				assign_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				keyword_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 76;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(noresParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(noresParser.SEMICOLON, 0); }
		public Assign_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterAssign_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitAssign_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Assign_stmtContext assign_stmt() {
		Assign_stmtContext _localctx = new Assign_stmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_assign_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			reference(0);
			State = 80;
			Match(EQUALS);
			State = 81;
			expression(0);
			State = 82;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Basic_referenceContext basic_reference() {
			return GetRuleContext<Basic_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arguments_listContext arguments_list() {
			return GetRuleContext<Arguments_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(noresParser.ARROW, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		return reference(0);
	}

	private ReferenceContext reference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ReferenceContext _localctx = new ReferenceContext(Context, _parentState);
		ReferenceContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_reference, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 85;
			basic_reference();
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 86;
				arguments_list();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 97;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ReferenceContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_reference);
					State = 89;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 90;
					Match(ARROW);
					State = 91;
					basic_reference();
					State = 93;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 92;
						arguments_list();
						}
						break;
					}
					}
					} 
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(noresParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(noresParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_commalistContext subscript_commalist() {
			return GetRuleContext<Subscript_commalistContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 8, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(LPAR);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 13035765776L) != 0) {
				{
				State = 101;
				subscript_commalist();
				}
			}

			State = 104;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arguments_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		public Arguments_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterArguments_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitArguments_list(this);
		}
	}

	[RuleVersion(0)]
	public Arguments_listContext arguments_list() {
		Arguments_listContext _localctx = new Arguments_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_arguments_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 106;
					arguments();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 109;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_referenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Structure_qualification_listContext structure_qualification_list() {
			return GetRuleContext<Structure_qualification_listContext>(0);
		}
		public Basic_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterBasic_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitBasic_reference(this);
		}
	}

	[RuleVersion(0)]
	public Basic_referenceContext basic_reference() {
		Basic_referenceContext _localctx = new Basic_referenceContext(Context, State);
		EnterRule(_localctx, 12, RULE_basic_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 111;
				structure_qualification_list();
				}
				break;
			}
			State = 114;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_qualificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(noresParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Structure_qualificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_qualification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterStructure_qualification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitStructure_qualification(this);
		}
	}

	[RuleVersion(0)]
	public Structure_qualificationContext structure_qualification() {
		Structure_qualificationContext _localctx = new Structure_qualificationContext(Context, State);
		EnterRule(_localctx, 14, RULE_structure_qualification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			identifier();
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 117;
				arguments();
				}
			}

			State = 120;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_qualification_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Structure_qualificationContext[] structure_qualification() {
			return GetRuleContexts<Structure_qualificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Structure_qualificationContext structure_qualification(int i) {
			return GetRuleContext<Structure_qualificationContext>(i);
		}
		public Structure_qualification_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_qualification_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterStructure_qualification_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitStructure_qualification_list(this);
		}
	}

	[RuleVersion(0)]
	public Structure_qualification_listContext structure_qualification_list() {
		Structure_qualification_listContext _localctx = new Structure_qualification_listContext(Context, State);
		EnterRule(_localctx, 16, RULE_structure_qualification_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 122;
					structure_qualification();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 125;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 18, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subscript_commalistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(noresParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(noresParser.COMMA, i);
		}
		public Subscript_commalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript_commalist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterSubscript_commalist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitSubscript_commalist(this);
		}
	}

	[RuleVersion(0)]
	public Subscript_commalistContext subscript_commalist() {
		Subscript_commalistContext _localctx = new Subscript_commalistContext(Context, State);
		EnterRule(_localctx, 20, RULE_subscript_commalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			subscript();
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 130;
				Match(COMMA);
				State = 131;
				subscript();
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_9Context expression_9() {
			return GetRuleContext<Expression_9Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 138;
			expression_9(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 145;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 140;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 141;
					Match(T__0);
					State = 142;
					expression_9(0);
					}
					} 
				}
				State = 147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_9Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_8Context expression_8() {
			return GetRuleContext<Expression_8Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_9Context expression_9() {
			return GetRuleContext<Expression_9Context>(0);
		}
		public Expression_9Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_9; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterExpression_9(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitExpression_9(this);
		}
	}

	[RuleVersion(0)]
	public Expression_9Context expression_9() {
		return expression_9(0);
	}

	private Expression_9Context expression_9(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_9Context _localctx = new Expression_9Context(Context, _parentState);
		Expression_9Context _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression_9, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 149;
			expression_8(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 156;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_9Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_9);
					State = 151;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 152;
					Match(T__1);
					State = 153;
					expression_8(0);
					}
					} 
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_8Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_7Context expression_7() {
			return GetRuleContext<Expression_7Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_8Context expression_8() {
			return GetRuleContext<Expression_8Context>(0);
		}
		public Expression_8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_8; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterExpression_8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitExpression_8(this);
		}
	}

	[RuleVersion(0)]
	public Expression_8Context expression_8() {
		return expression_8(0);
	}

	private Expression_8Context expression_8(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_8Context _localctx = new Expression_8Context(Context, _parentState);
		Expression_8Context _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expression_8, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 160;
			expression_7(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 167;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_8Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_8);
					State = 162;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 163;
					_la = TokenStream.LA(1);
					if ( !(_la==T__2 || _la==T__3) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 164;
					expression_7(0);
					}
					} 
				}
				State = 169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_7Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_6Context expression_6() {
			return GetRuleContext<Expression_6Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_7Context expression_7() {
			return GetRuleContext<Expression_7Context>(0);
		}
		public Expression_7Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_7; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterExpression_7(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitExpression_7(this);
		}
	}

	[RuleVersion(0)]
	public Expression_7Context expression_7() {
		return expression_7(0);
	}

	private Expression_7Context expression_7(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_7Context _localctx = new Expression_7Context(Context, _parentState);
		Expression_7Context _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression_7, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 171;
			expression_6(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 178;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_7Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_7);
					State = 173;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 174;
					Match(T__4);
					State = 175;
					expression_6(0);
					}
					} 
				}
				State = 180;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_6Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_5Context expression_5() {
			return GetRuleContext<Expression_5Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_6Context expression_6() {
			return GetRuleContext<Expression_6Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public Expression_6Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_6; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterExpression_6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitExpression_6(this);
		}
	}

	[RuleVersion(0)]
	public Expression_6Context expression_6() {
		return expression_6(0);
	}

	private Expression_6Context expression_6(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_6Context _localctx = new Expression_6Context(Context, _parentState);
		Expression_6Context _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression_6, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 182;
			expression_5(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 190;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_6Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_6);
					State = 184;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 185;
					comparison_operator();
					State = 186;
					expression_5(0);
					}
					} 
				}
				State = 192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_5Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_4Context expression_4() {
			return GetRuleContext<Expression_4Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_5Context expression_5() {
			return GetRuleContext<Expression_5Context>(0);
		}
		public Expression_5Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_5; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterExpression_5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitExpression_5(this);
		}
	}

	[RuleVersion(0)]
	public Expression_5Context expression_5() {
		return expression_5(0);
	}

	private Expression_5Context expression_5(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_5Context _localctx = new Expression_5Context(Context, _parentState);
		Expression_5Context _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expression_5, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 194;
			expression_4(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 201;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_5Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_5);
					State = 196;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 197;
					Match(T__5);
					State = 198;
					expression_4(0);
					}
					} 
				}
				State = 203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_4Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_3Context expression_3() {
			return GetRuleContext<Expression_3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_4Context expression_4() {
			return GetRuleContext<Expression_4Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(noresParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(noresParser.MINUS, 0); }
		public Expression_4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_4; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterExpression_4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitExpression_4(this);
		}
	}

	[RuleVersion(0)]
	public Expression_4Context expression_4() {
		return expression_4(0);
	}

	private Expression_4Context expression_4(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_4Context _localctx = new Expression_4Context(Context, _parentState);
		Expression_4Context _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expression_4, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 205;
			expression_3(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 212;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_4Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_4);
					State = 207;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 208;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 209;
					expression_3(0);
					}
					} 
				}
				State = 214;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_2Context expression_2() {
			return GetRuleContext<Expression_2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_3Context expression_3() {
			return GetRuleContext<Expression_3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(noresParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(noresParser.DIVIDE, 0); }
		public Expression_3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterExpression_3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitExpression_3(this);
		}
	}

	[RuleVersion(0)]
	public Expression_3Context expression_3() {
		return expression_3(0);
	}

	private Expression_3Context expression_3(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_3Context _localctx = new Expression_3Context(Context, _parentState);
		Expression_3Context _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression_3, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 216;
			expression_2();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 223;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_3Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_3);
					State = 218;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 219;
					_la = TokenStream.LA(1);
					if ( !(_la==TIMES || _la==DIVIDE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 220;
					expression_2();
					}
					} 
				}
				State = 225;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_expressionContext primitive_expression() {
			return GetRuleContext<Primitive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_expressionContext prefix_expression() {
			return GetRuleContext<Prefix_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parenthesized_expressionContext parenthesized_expression() {
			return GetRuleContext<Parenthesized_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_1Context expression_1() {
			return GetRuleContext<Expression_1Context>(0);
		}
		public Expression_2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterExpression_2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitExpression_2(this);
		}
	}

	[RuleVersion(0)]
	public Expression_2Context expression_2() {
		Expression_2Context _localctx = new Expression_2Context(Context, State);
		EnterRule(_localctx, 38, RULE_expression_2);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226;
				primitive_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				prefix_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 228;
				parenthesized_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 229;
				expression_1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(noresParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_2Context expression_2() {
			return GetRuleContext<Expression_2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_expressionContext primitive_expression() {
			return GetRuleContext<Primitive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parenthesized_expressionContext parenthesized_expression() {
			return GetRuleContext<Parenthesized_expressionContext>(0);
		}
		public Expression_1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterExpression_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitExpression_1(this);
		}
	}

	[RuleVersion(0)]
	public Expression_1Context expression_1() {
		Expression_1Context _localctx = new Expression_1Context(Context, State);
		EnterRule(_localctx, 40, RULE_expression_1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CALL:
			case GOTO:
			case PROCEDURE:
			case PROC:
			case END:
			case IDENTIFIER:
				{
				State = 232;
				primitive_expression();
				}
				break;
			case LPAR:
				{
				State = 233;
				parenthesized_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 236;
			Match(POWER);
			State = 237;
			expression_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_operatorContext prefix_operator() {
			return GetRuleContext<Prefix_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_2Context expression_2() {
			return GetRuleContext<Expression_2Context>(0);
		}
		public Prefix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterPrefix_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitPrefix_expression(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_expressionContext prefix_expression() {
		Prefix_expressionContext _localctx = new Prefix_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_prefix_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			prefix_operator();
			State = 240;
			expression_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesized_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(noresParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(noresParser.RPAR, 0); }
		public Parenthesized_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterParenthesized_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitParenthesized_expression(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_expressionContext parenthesized_expression() {
		Parenthesized_expressionContext _localctx = new Parenthesized_expressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_parenthesized_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(LPAR);
			State = 243;
			expression(0);
			State = 244;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterPrimitive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitPrimitive_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_expressionContext primitive_expression() {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_primitive_expression);
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALL:
			case GOTO:
			case PROCEDURE:
			case PROC:
			case END:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				reference(0);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(noresParser.INT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 48, RULE_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(noresParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(noresParser.MINUS, 0); }
		public Prefix_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterPrefix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitPrefix_operator(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_operatorContext prefix_operator() {
		Prefix_operatorContext _localctx = new Prefix_operatorContext(Context, State);
		EnterRule(_localctx, 50, RULE_prefix_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 12884901904L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(noresParser.EQUALS, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 52, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 536887168L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(noresParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_identifier);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALL:
			case GOTO:
			case PROCEDURE:
			case PROC:
			case END:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				keyword();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(noresParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(noresParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(noresParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(noresParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(noresParser.END, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 56, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 8126464L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Call_stmtContext call_stmt() {
			return GetRuleContext<Call_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Goto_stmtContext goto_stmt() {
			return GetRuleContext<Goto_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_stmtContext procedure_stmt() {
			return GetRuleContext<Procedure_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_stmtContext end_stmt() {
			return GetRuleContext<End_stmtContext>(0);
		}
		public Keyword_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterKeyword_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitKeyword_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_stmtContext keyword_stmt() {
		Keyword_stmtContext _localctx = new Keyword_stmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_keyword_stmt);
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 262;
				call_stmt();
				}
				break;
			case GOTO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263;
				goto_stmt();
				}
				break;
			case PROCEDURE:
			case PROC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 264;
				procedure_stmt();
				}
				break;
			case END:
				EnterOuterAlt(_localctx, 4);
				{
				State = 265;
				end_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(noresParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(noresParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(noresParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(noresParser.SEMICOLON, 0); }
		public Call_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterCall_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitCall_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Call_stmtContext call_stmt() {
		Call_stmtContext _localctx = new Call_stmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_call_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(CALL);
			State = 269;
			reference(0);
			State = 270;
			Match(LPAR);
			State = 271;
			Match(RPAR);
			State = 272;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(noresParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(noresParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(noresParser.SEMICOLON, 0); }
		public Goto_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterGoto_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitGoto_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Goto_stmtContext goto_stmt() {
		Goto_stmtContext _localctx = new Goto_stmtContext(Context, State);
		EnterRule(_localctx, 62, RULE_goto_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(GOTO);
			State = 275;
			Match(IDENTIFIER);
			State = 276;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(noresParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(noresParser.SEMICOLON, 0); }
		public End_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterEnd_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitEnd_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_stmtContext end_stmt() {
		End_stmtContext _localctx = new End_stmtContext(Context, State);
		EnterRule(_localctx, 64, RULE_end_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(END);
			State = 279;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_stmtContext end_stmt() {
			return GetRuleContext<End_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(noresParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(noresParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(noresParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(noresParser.RPAR, 0); }
		public Procedure_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.EnterProcedure_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InoresListener typedListener = listener as InoresListener;
			if (typedListener != null) typedListener.ExitProcedure_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_stmtContext procedure_stmt() {
		Procedure_stmtContext _localctx = new Procedure_stmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_procedure_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_la = TokenStream.LA(1);
			if ( !(_la==PROCEDURE || _la==PROC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 282;
			identifier();
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 283;
				Match(LPAR);
				State = 284;
				Match(RPAR);
				}
			}

			State = 287;
			prog();
			State = 288;
			end_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return reference_sempred((ReferenceContext)_localctx, predIndex);
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 12: return expression_9_sempred((Expression_9Context)_localctx, predIndex);
		case 13: return expression_8_sempred((Expression_8Context)_localctx, predIndex);
		case 14: return expression_7_sempred((Expression_7Context)_localctx, predIndex);
		case 15: return expression_6_sempred((Expression_6Context)_localctx, predIndex);
		case 16: return expression_5_sempred((Expression_5Context)_localctx, predIndex);
		case 17: return expression_4_sempred((Expression_4Context)_localctx, predIndex);
		case 18: return expression_3_sempred((Expression_3Context)_localctx, predIndex);
		}
		return true;
	}
	private bool reference_sempred(ReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_9_sempred(Expression_9Context _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_8_sempred(Expression_8Context _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_7_sempred(Expression_7Context _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_6_sempred(Expression_6Context _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_5_sempred(Expression_5Context _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_4_sempred(Expression_4Context _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_3_sempred(Expression_3Context _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,35,291,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,5,0,70,8,0,10,0,
		12,0,73,9,0,1,1,1,1,1,1,3,1,78,8,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,3,3,
		88,8,3,1,3,1,3,1,3,1,3,3,3,94,8,3,5,3,96,8,3,10,3,12,3,99,9,3,1,4,1,4,
		3,4,103,8,4,1,4,1,4,1,5,4,5,108,8,5,11,5,12,5,109,1,6,3,6,113,8,6,1,6,
		1,6,1,7,1,7,3,7,119,8,7,1,7,1,7,1,8,4,8,124,8,8,11,8,12,8,125,1,9,1,9,
		1,10,1,10,1,10,5,10,133,8,10,10,10,12,10,136,9,10,1,11,1,11,1,11,1,11,
		1,11,1,11,5,11,144,8,11,10,11,12,11,147,9,11,1,12,1,12,1,12,1,12,1,12,
		1,12,5,12,155,8,12,10,12,12,12,158,9,12,1,13,1,13,1,13,1,13,1,13,1,13,
		5,13,166,8,13,10,13,12,13,169,9,13,1,14,1,14,1,14,1,14,1,14,1,14,5,14,
		177,8,14,10,14,12,14,180,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,
		189,8,15,10,15,12,15,192,9,15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,200,8,
		16,10,16,12,16,203,9,16,1,17,1,17,1,17,1,17,1,17,1,17,5,17,211,8,17,10,
		17,12,17,214,9,17,1,18,1,18,1,18,1,18,1,18,1,18,5,18,222,8,18,10,18,12,
		18,225,9,18,1,19,1,19,1,19,1,19,3,19,231,8,19,1,20,1,20,3,20,235,8,20,
		1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,3,23,249,8,
		23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,3,27,259,8,27,1,28,1,28,1,29,
		1,29,1,29,1,29,3,29,267,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,
		31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,286,8,33,1,33,1,33,1,33,
		1,33,0,9,6,22,24,26,28,30,32,34,36,34,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,0,7,1,0,
		3,4,1,0,32,33,1,0,30,31,2,0,4,4,32,33,2,0,7,13,29,29,1,0,18,22,1,0,20,
		21,286,0,71,1,0,0,0,2,77,1,0,0,0,4,79,1,0,0,0,6,84,1,0,0,0,8,100,1,0,0,
		0,10,107,1,0,0,0,12,112,1,0,0,0,14,116,1,0,0,0,16,123,1,0,0,0,18,127,1,
		0,0,0,20,129,1,0,0,0,22,137,1,0,0,0,24,148,1,0,0,0,26,159,1,0,0,0,28,170,
		1,0,0,0,30,181,1,0,0,0,32,193,1,0,0,0,34,204,1,0,0,0,36,215,1,0,0,0,38,
		230,1,0,0,0,40,234,1,0,0,0,42,239,1,0,0,0,44,242,1,0,0,0,46,248,1,0,0,
		0,48,250,1,0,0,0,50,252,1,0,0,0,52,254,1,0,0,0,54,258,1,0,0,0,56,260,1,
		0,0,0,58,266,1,0,0,0,60,268,1,0,0,0,62,274,1,0,0,0,64,278,1,0,0,0,66,281,
		1,0,0,0,68,70,3,2,1,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,
		1,0,0,0,72,1,1,0,0,0,73,71,1,0,0,0,74,78,3,4,2,0,75,78,3,58,29,0,76,78,
		5,34,0,0,77,74,1,0,0,0,77,75,1,0,0,0,77,76,1,0,0,0,78,3,1,0,0,0,79,80,
		3,6,3,0,80,81,5,29,0,0,81,82,3,22,11,0,82,83,5,34,0,0,83,5,1,0,0,0,84,
		85,6,3,-1,0,85,87,3,12,6,0,86,88,3,10,5,0,87,86,1,0,0,0,87,88,1,0,0,0,
		88,97,1,0,0,0,89,90,10,2,0,0,90,91,5,24,0,0,91,93,3,12,6,0,92,94,3,10,
		5,0,93,92,1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,89,1,0,0,0,96,99,1,0,
		0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,7,1,0,0,0,99,97,1,0,0,0,100,102,5,27,
		0,0,101,103,3,20,10,0,102,101,1,0,0,0,102,103,1,0,0,0,103,104,1,0,0,0,
		104,105,5,28,0,0,105,9,1,0,0,0,106,108,3,8,4,0,107,106,1,0,0,0,108,109,
		1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,11,1,0,0,0,111,113,3,16,8,
		0,112,111,1,0,0,0,112,113,1,0,0,0,113,114,1,0,0,0,114,115,3,54,27,0,115,
		13,1,0,0,0,116,118,3,54,27,0,117,119,3,8,4,0,118,117,1,0,0,0,118,119,1,
		0,0,0,119,120,1,0,0,0,120,121,5,25,0,0,121,15,1,0,0,0,122,124,3,14,7,0,
		123,122,1,0,0,0,124,125,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,17,
		1,0,0,0,127,128,3,22,11,0,128,19,1,0,0,0,129,134,3,18,9,0,130,131,5,26,
		0,0,131,133,3,18,9,0,132,130,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,
		135,1,0,0,0,135,21,1,0,0,0,136,134,1,0,0,0,137,138,6,11,-1,0,138,139,3,
		24,12,0,139,145,1,0,0,0,140,141,10,1,0,0,141,142,5,1,0,0,142,144,3,24,
		12,0,143,140,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,
		23,1,0,0,0,147,145,1,0,0,0,148,149,6,12,-1,0,149,150,3,26,13,0,150,156,
		1,0,0,0,151,152,10,1,0,0,152,153,5,2,0,0,153,155,3,26,13,0,154,151,1,0,
		0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,25,1,0,0,0,158,
		156,1,0,0,0,159,160,6,13,-1,0,160,161,3,28,14,0,161,167,1,0,0,0,162,163,
		10,1,0,0,163,164,7,0,0,0,164,166,3,28,14,0,165,162,1,0,0,0,166,169,1,0,
		0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,27,1,0,0,0,169,167,1,0,0,0,170,
		171,6,14,-1,0,171,172,3,30,15,0,172,178,1,0,0,0,173,174,10,1,0,0,174,175,
		5,5,0,0,175,177,3,30,15,0,176,173,1,0,0,0,177,180,1,0,0,0,178,176,1,0,
		0,0,178,179,1,0,0,0,179,29,1,0,0,0,180,178,1,0,0,0,181,182,6,15,-1,0,182,
		183,3,32,16,0,183,190,1,0,0,0,184,185,10,1,0,0,185,186,3,52,26,0,186,187,
		3,32,16,0,187,189,1,0,0,0,188,184,1,0,0,0,189,192,1,0,0,0,190,188,1,0,
		0,0,190,191,1,0,0,0,191,31,1,0,0,0,192,190,1,0,0,0,193,194,6,16,-1,0,194,
		195,3,34,17,0,195,201,1,0,0,0,196,197,10,1,0,0,197,198,5,6,0,0,198,200,
		3,34,17,0,199,196,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,
		0,0,202,33,1,0,0,0,203,201,1,0,0,0,204,205,6,17,-1,0,205,206,3,36,18,0,
		206,212,1,0,0,0,207,208,10,1,0,0,208,209,7,1,0,0,209,211,3,36,18,0,210,
		207,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,35,1,0,
		0,0,214,212,1,0,0,0,215,216,6,18,-1,0,216,217,3,38,19,0,217,223,1,0,0,
		0,218,219,10,1,0,0,219,220,7,2,0,0,220,222,3,38,19,0,221,218,1,0,0,0,222,
		225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,37,1,0,0,0,225,223,1,0,
		0,0,226,231,3,46,23,0,227,231,3,42,21,0,228,231,3,44,22,0,229,231,3,40,
		20,0,230,226,1,0,0,0,230,227,1,0,0,0,230,228,1,0,0,0,230,229,1,0,0,0,231,
		39,1,0,0,0,232,235,3,46,23,0,233,235,3,44,22,0,234,232,1,0,0,0,234,233,
		1,0,0,0,235,236,1,0,0,0,236,237,5,35,0,0,237,238,3,38,19,0,238,41,1,0,
		0,0,239,240,3,50,25,0,240,241,3,38,19,0,241,43,1,0,0,0,242,243,5,27,0,
		0,243,244,3,22,11,0,244,245,5,28,0,0,245,45,1,0,0,0,246,249,3,6,3,0,247,
		249,3,48,24,0,248,246,1,0,0,0,248,247,1,0,0,0,249,47,1,0,0,0,250,251,5,
		17,0,0,251,49,1,0,0,0,252,253,7,3,0,0,253,51,1,0,0,0,254,255,7,4,0,0,255,
		53,1,0,0,0,256,259,3,56,28,0,257,259,5,23,0,0,258,256,1,0,0,0,258,257,
		1,0,0,0,259,55,1,0,0,0,260,261,7,5,0,0,261,57,1,0,0,0,262,267,3,60,30,
		0,263,267,3,62,31,0,264,267,3,66,33,0,265,267,3,64,32,0,266,262,1,0,0,
		0,266,263,1,0,0,0,266,264,1,0,0,0,266,265,1,0,0,0,267,59,1,0,0,0,268,269,
		5,18,0,0,269,270,3,6,3,0,270,271,5,27,0,0,271,272,5,28,0,0,272,273,5,34,
		0,0,273,61,1,0,0,0,274,275,5,19,0,0,275,276,5,23,0,0,276,277,5,34,0,0,
		277,63,1,0,0,0,278,279,5,22,0,0,279,280,5,34,0,0,280,65,1,0,0,0,281,282,
		7,6,0,0,282,285,3,54,27,0,283,284,5,27,0,0,284,286,5,28,0,0,285,283,1,
		0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,288,3,0,0,0,288,289,3,64,32,
		0,289,67,1,0,0,0,25,71,77,87,93,97,102,109,112,118,125,134,145,156,167,
		178,190,201,212,223,230,234,248,258,266,285
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
