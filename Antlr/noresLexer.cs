//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from nores.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class noresLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, COMMENT=16, 
		WS=17, NEWLINE=18, TAB=19, INT=20, GOTO=21, GO=22, TO=23, CALL=24, PROCEDURE=25, 
		PROC=26, END=27, DECLARE=28, BINARY=29, DECIMAL=30, AUTOMATIC=31, BUILTIN=32, 
		STATIC=33, VARIABLE=34, BASED=35, DEFINED=36, INTERNAL=37, EXTERNAL=38, 
		RETURN=39, IF=40, THEN=41, IDENTIFIER=42, ARROW=43, DOT=44, COMMA=45, 
		LPAR=46, RPAR=47, EQUALS=48, TIMES=49, DIVIDE=50, PLUS=51, MINUS=52, SEMICOLON=53, 
		POWER=54;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "COMMENT", "WS", 
		"NEWLINE", "TAB", "INT", "GOTO", "GO", "TO", "CALL", "PROCEDURE", "PROC", 
		"END", "DECLARE", "BINARY", "DECIMAL", "AUTOMATIC", "BUILTIN", "STATIC", 
		"VARIABLE", "BASED", "DEFINED", "INTERNAL", "EXTERNAL", "RETURN", "IF", 
		"THEN", "IDENTIFIER", "ARROW", "DOT", "COMMA", "LPAR", "RPAR", "EQUALS", 
		"TIMES", "DIVIDE", "PLUS", "MINUS", "SEMICOLON", "POWER"
	};

	public String langcode = "en";

	public noresLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public noresLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'%'", "'include'", "'|:'", "'&:'", "'|'", "'~'", "'&'", "'||'", 
		"'>'", "'>='", "'<'", "'<='", "'~>'", "'~='", "'~<'", null, null, null, 
		null, null, null, null, null, null, null, "'proc'", "'end'", null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'->'", "'.'", "','", "'('", "')'", "'='", "'*'", "'/'", "'+'", 
		"'-'", "';'", "'**'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "COMMENT", "WS", "NEWLINE", "TAB", "INT", "GOTO", 
		"GO", "TO", "CALL", "PROCEDURE", "PROC", "END", "DECLARE", "BINARY", "DECIMAL", 
		"AUTOMATIC", "BUILTIN", "STATIC", "VARIABLE", "BASED", "DEFINED", "INTERNAL", 
		"EXTERNAL", "RETURN", "IF", "THEN", "IDENTIFIER", "ARROW", "DOT", "COMMA", 
		"LPAR", "RPAR", "EQUALS", "TIMES", "DIVIDE", "PLUS", "MINUS", "SEMICOLON", 
		"POWER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "nores.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static noresLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20 : return GOTO_sempred(_localctx, predIndex);
		case 21 : return GO_sempred(_localctx, predIndex);
		case 22 : return TO_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool GOTO_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return langcode=="en";
		case 1: return langcode=="fr";
		}
		return true;
	}
	private bool GO_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return langcode=="en";
		case 3: return langcode=="fr";
		}
		return true;
	}
	private bool TO_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return langcode=="en";
		case 5: return langcode=="fr";
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,0,54,405,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
		1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,
		13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,5,15,158,8,15,10,15,12,15,161,
		9,15,1,15,1,15,1,15,1,15,1,15,1,16,4,16,169,8,16,11,16,12,16,170,1,16,
		1,16,1,17,4,17,176,8,17,11,17,12,17,177,1,17,1,17,1,18,4,18,183,8,18,11,
		18,12,18,184,1,18,1,18,1,19,4,19,190,8,19,11,19,12,19,191,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,205,8,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,3,21,216,8,21,1,22,1,22,1,22,1,22,1,22,3,
		22,223,8,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,3,24,243,8,24,1,25,1,25,1,25,1,25,1,25,1,
		26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,
		27,264,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,275,8,28,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,287,8,29,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,302,8,30,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
		1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
		1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,
		1,40,1,41,4,41,376,8,41,11,41,12,41,377,1,42,1,42,1,42,1,43,1,43,1,44,
		1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,
		1,51,1,52,1,52,1,53,1,53,1,53,1,159,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
		15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
		87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,
		1,0,3,2,0,10,10,13,13,1,0,48,57,3,0,65,90,95,95,97,122,418,0,1,1,0,0,0,
		0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
		0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
		25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
		0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
		0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
		0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
		1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,1,109,1,0,0,0,3,111,
		1,0,0,0,5,119,1,0,0,0,7,122,1,0,0,0,9,125,1,0,0,0,11,127,1,0,0,0,13,129,
		1,0,0,0,15,131,1,0,0,0,17,134,1,0,0,0,19,136,1,0,0,0,21,139,1,0,0,0,23,
		141,1,0,0,0,25,144,1,0,0,0,27,147,1,0,0,0,29,150,1,0,0,0,31,153,1,0,0,
		0,33,168,1,0,0,0,35,175,1,0,0,0,37,182,1,0,0,0,39,189,1,0,0,0,41,204,1,
		0,0,0,43,215,1,0,0,0,45,222,1,0,0,0,47,224,1,0,0,0,49,242,1,0,0,0,51,244,
		1,0,0,0,53,249,1,0,0,0,55,263,1,0,0,0,57,274,1,0,0,0,59,286,1,0,0,0,61,
		301,1,0,0,0,63,303,1,0,0,0,65,311,1,0,0,0,67,318,1,0,0,0,69,327,1,0,0,
		0,71,333,1,0,0,0,73,341,1,0,0,0,75,350,1,0,0,0,77,359,1,0,0,0,79,366,1,
		0,0,0,81,369,1,0,0,0,83,375,1,0,0,0,85,379,1,0,0,0,87,382,1,0,0,0,89,384,
		1,0,0,0,91,386,1,0,0,0,93,388,1,0,0,0,95,390,1,0,0,0,97,392,1,0,0,0,99,
		394,1,0,0,0,101,396,1,0,0,0,103,398,1,0,0,0,105,400,1,0,0,0,107,402,1,
		0,0,0,109,110,5,37,0,0,110,2,1,0,0,0,111,112,5,105,0,0,112,113,5,110,0,
		0,113,114,5,99,0,0,114,115,5,108,0,0,115,116,5,117,0,0,116,117,5,100,0,
		0,117,118,5,101,0,0,118,4,1,0,0,0,119,120,5,124,0,0,120,121,5,58,0,0,121,
		6,1,0,0,0,122,123,5,38,0,0,123,124,5,58,0,0,124,8,1,0,0,0,125,126,5,124,
		0,0,126,10,1,0,0,0,127,128,5,126,0,0,128,12,1,0,0,0,129,130,5,38,0,0,130,
		14,1,0,0,0,131,132,5,124,0,0,132,133,5,124,0,0,133,16,1,0,0,0,134,135,
		5,62,0,0,135,18,1,0,0,0,136,137,5,62,0,0,137,138,5,61,0,0,138,20,1,0,0,
		0,139,140,5,60,0,0,140,22,1,0,0,0,141,142,5,60,0,0,142,143,5,61,0,0,143,
		24,1,0,0,0,144,145,5,126,0,0,145,146,5,62,0,0,146,26,1,0,0,0,147,148,5,
		126,0,0,148,149,5,61,0,0,149,28,1,0,0,0,150,151,5,126,0,0,151,152,5,60,
		0,0,152,30,1,0,0,0,153,154,5,47,0,0,154,155,5,42,0,0,155,159,1,0,0,0,156,
		158,9,0,0,0,157,156,1,0,0,0,158,161,1,0,0,0,159,160,1,0,0,0,159,157,1,
		0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,163,5,42,0,0,163,164,5,47,0,
		0,164,165,1,0,0,0,165,166,6,15,0,0,166,32,1,0,0,0,167,169,5,32,0,0,168,
		167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,172,1,
		0,0,0,172,173,6,16,1,0,173,34,1,0,0,0,174,176,7,0,0,0,175,174,1,0,0,0,
		176,177,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,180,
		6,17,1,0,180,36,1,0,0,0,181,183,5,9,0,0,182,181,1,0,0,0,183,184,1,0,0,
		0,184,182,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,187,6,18,1,0,187,
		38,1,0,0,0,188,190,7,1,0,0,189,188,1,0,0,0,190,191,1,0,0,0,191,189,1,0,
		0,0,191,192,1,0,0,0,192,40,1,0,0,0,193,194,4,20,0,0,194,195,5,103,0,0,
		195,196,5,111,0,0,196,197,5,116,0,0,197,205,5,111,0,0,198,199,4,20,1,0,
		199,200,5,97,0,0,200,201,5,108,0,0,201,202,5,108,0,0,202,203,5,101,0,0,
		203,205,5,114,0,0,204,193,1,0,0,0,204,198,1,0,0,0,205,42,1,0,0,0,206,207,
		4,21,2,0,207,208,5,103,0,0,208,216,5,111,0,0,209,210,4,21,3,0,210,211,
		5,97,0,0,211,212,5,108,0,0,212,213,5,108,0,0,213,214,5,101,0,0,214,216,
		5,114,0,0,215,206,1,0,0,0,215,209,1,0,0,0,216,44,1,0,0,0,217,218,4,22,
		4,0,218,219,5,116,0,0,219,223,5,111,0,0,220,221,4,22,5,0,221,223,5,65533,
		0,0,222,217,1,0,0,0,222,220,1,0,0,0,223,46,1,0,0,0,224,225,5,99,0,0,225,
		226,5,97,0,0,226,227,5,108,0,0,227,228,5,108,0,0,228,48,1,0,0,0,229,230,
		5,112,0,0,230,231,5,114,0,0,231,232,5,111,0,0,232,233,5,99,0,0,233,234,
		5,101,0,0,234,235,5,100,0,0,235,236,5,117,0,0,236,237,5,114,0,0,237,243,
		5,101,0,0,238,239,5,112,0,0,239,240,5,114,0,0,240,241,5,111,0,0,241,243,
		5,99,0,0,242,229,1,0,0,0,242,238,1,0,0,0,243,50,1,0,0,0,244,245,5,112,
		0,0,245,246,5,114,0,0,246,247,5,111,0,0,247,248,5,99,0,0,248,52,1,0,0,
		0,249,250,5,101,0,0,250,251,5,110,0,0,251,252,5,100,0,0,252,54,1,0,0,0,
		253,254,5,100,0,0,254,255,5,101,0,0,255,256,5,99,0,0,256,257,5,108,0,0,
		257,258,5,97,0,0,258,259,5,114,0,0,259,264,5,101,0,0,260,261,5,100,0,0,
		261,262,5,99,0,0,262,264,5,108,0,0,263,253,1,0,0,0,263,260,1,0,0,0,264,
		56,1,0,0,0,265,266,5,98,0,0,266,267,5,105,0,0,267,268,5,110,0,0,268,269,
		5,97,0,0,269,270,5,114,0,0,270,275,5,121,0,0,271,272,5,98,0,0,272,273,
		5,105,0,0,273,275,5,110,0,0,274,265,1,0,0,0,274,271,1,0,0,0,275,58,1,0,
		0,0,276,277,5,100,0,0,277,278,5,101,0,0,278,279,5,99,0,0,279,280,5,105,
		0,0,280,281,5,109,0,0,281,282,5,97,0,0,282,287,5,108,0,0,283,284,5,100,
		0,0,284,285,5,101,0,0,285,287,5,99,0,0,286,276,1,0,0,0,286,283,1,0,0,0,
		287,60,1,0,0,0,288,289,5,97,0,0,289,290,5,117,0,0,290,291,5,116,0,0,291,
		292,5,111,0,0,292,293,5,109,0,0,293,294,5,97,0,0,294,295,5,116,0,0,295,
		296,5,105,0,0,296,302,5,99,0,0,297,298,5,97,0,0,298,299,5,117,0,0,299,
		300,5,116,0,0,300,302,5,111,0,0,301,288,1,0,0,0,301,297,1,0,0,0,302,62,
		1,0,0,0,303,304,5,98,0,0,304,305,5,117,0,0,305,306,5,105,0,0,306,307,5,
		108,0,0,307,308,5,116,0,0,308,309,5,105,0,0,309,310,5,110,0,0,310,64,1,
		0,0,0,311,312,5,115,0,0,312,313,5,116,0,0,313,314,5,97,0,0,314,315,5,116,
		0,0,315,316,5,105,0,0,316,317,5,99,0,0,317,66,1,0,0,0,318,319,5,118,0,
		0,319,320,5,97,0,0,320,321,5,114,0,0,321,322,5,105,0,0,322,323,5,97,0,
		0,323,324,5,98,0,0,324,325,5,108,0,0,325,326,5,101,0,0,326,68,1,0,0,0,
		327,328,5,98,0,0,328,329,5,97,0,0,329,330,5,115,0,0,330,331,5,101,0,0,
		331,332,5,100,0,0,332,70,1,0,0,0,333,334,5,100,0,0,334,335,5,101,0,0,335,
		336,5,102,0,0,336,337,5,105,0,0,337,338,5,110,0,0,338,339,5,101,0,0,339,
		340,5,100,0,0,340,72,1,0,0,0,341,342,5,105,0,0,342,343,5,110,0,0,343,344,
		5,116,0,0,344,345,5,101,0,0,345,346,5,114,0,0,346,347,5,110,0,0,347,348,
		5,97,0,0,348,349,5,108,0,0,349,74,1,0,0,0,350,351,5,101,0,0,351,352,5,
		120,0,0,352,353,5,116,0,0,353,354,5,101,0,0,354,355,5,114,0,0,355,356,
		5,110,0,0,356,357,5,97,0,0,357,358,5,108,0,0,358,76,1,0,0,0,359,360,5,
		114,0,0,360,361,5,101,0,0,361,362,5,116,0,0,362,363,5,117,0,0,363,364,
		5,114,0,0,364,365,5,110,0,0,365,78,1,0,0,0,366,367,5,105,0,0,367,368,5,
		102,0,0,368,80,1,0,0,0,369,370,5,116,0,0,370,371,5,104,0,0,371,372,5,101,
		0,0,372,373,5,110,0,0,373,82,1,0,0,0,374,376,7,2,0,0,375,374,1,0,0,0,376,
		377,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,84,1,0,0,0,379,380,5,45,
		0,0,380,381,5,62,0,0,381,86,1,0,0,0,382,383,5,46,0,0,383,88,1,0,0,0,384,
		385,5,44,0,0,385,90,1,0,0,0,386,387,5,40,0,0,387,92,1,0,0,0,388,389,5,
		41,0,0,389,94,1,0,0,0,390,391,5,61,0,0,391,96,1,0,0,0,392,393,5,42,0,0,
		393,98,1,0,0,0,394,395,5,47,0,0,395,100,1,0,0,0,396,397,5,43,0,0,397,102,
		1,0,0,0,398,399,5,45,0,0,399,104,1,0,0,0,400,401,5,59,0,0,401,106,1,0,
		0,0,402,403,5,42,0,0,403,404,5,42,0,0,404,108,1,0,0,0,15,0,159,170,177,
		184,191,204,215,222,242,263,274,286,301,377,2,0,2,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
